syntax = "proto3";

package schema;

import "google/protobuf/timestamp.proto";

// MemprofilerBackend is a service used by Memprofiler clients embedded into target applications
service MemprofilerBackend {
    // SaveReport is a client-side stream used to save memory usage reports to Memprofiler server
    rpc SaveReport (stream SaveReportRequest) returns (SaveReportResponse) {};
};

// --------- SaveReport ---------

// SaveReportRequest - request for SaveReport method
message SaveReportRequest {
    oneof payload {
        // service_descriptions - metadata about reporter
        ServiceDescription service_description = 1;
        // measurement - a memory utilization report itself
        Measurement measurement = 2;
    }
}

// SaveReportResponse - response for SaveReport method
message SaveReportResponse {
}

// ServiceDescription describes the service whose memory stats is being tracked
message ServiceDescription {
    // type - general service description
    string type = 1;
    // instance - description of a particular service instance
    string instance = 2;
}

// Measurement contains instantaneous memory usage stats
message Measurement {
    // observed_at - measurement timestamp
    google.protobuf.Timestamp observed_at = 1;
    // locations - list of known memory allocations occured in a process
    repeated Location locations = 2;
}

// Location contains memory allocation stats with
// information about where memory was actually allocated
message Location {
    MemoryUsage memory_usage = 1;
    Callstack callstack = 2;
}

// MemoryUsage contains memory usage stats for a particular call stack;
// this stats comes directly from Go runtime
message MemoryUsage {
    int64 alloc_objects = 1;
    int64 alloc_bytes = 2;
    int64 free_objects = 3;
    int64 free_bytes = 4;
}

// Callstack describes call stack of memory allocation event
message Callstack {
    // id represents unique identifier for a particular stack
    string id = 1;
    // frames describes the place code where heap allocation occured
    repeated StackFrame frames = 2;
}

// StackFrame provides information about a single stack frame
message StackFrame {
    string name = 1;
    string file = 2;
    int32 line = 3;
}
