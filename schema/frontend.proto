syntax = "proto3";

package schema;

import "backend.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// MemprofilerFrontend - API for web-clients
service MemprofilerFrontend {
    // GetServices returns the list of registered services
    rpc GetServices (GetServicesRequest) returns (GetServicesResponse) {};
    // GetInstances returns the list of service instances
    rpc GetInstances (GetInstancesRequest) returns (GetInstancesResponse) {};
    // GetSessions returns the list of available profiling sessions for a service instance
    rpc GetSessions (GetSessionsRequest) returns (GetSessionsResponse) {};
    // SubscribeForSession returns the stream of session updates with fresh trend values, if it's still alive
    rpc SubscribeForSession(SubscribeForSessionRequest) returns (stream SessionMetrics) {};
}

// -------- GetServices ---------

// GetServicesRequest is a request body for GetServices method
message GetServicesRequest {
}

// GetServicesResponse is a response body for GetServices method
message GetServicesResponse {
    // service_kinds - services that ever pushed data to this memprofiler
    repeated string service_kinds = 1;
}

// -------- GetInstances --------

// GetInstancesRequest is a request body for GetInstances method
message GetInstancesRequest {
    // service_kind - identifier for a group of similar services
    string service_kind = 1;
}

// GetInstancesResponse is a response body for GetInstances method
message GetInstancesResponse {
    // service_instances - list of instances of a particular kind of services
    repeated string service_instances = 1;
}

// -------- GetSessions --------

// GetSessionsRequest is a request body for GetSessions method
message GetSessionsRequest {
    // service_kind - identifier for a group of similar services
    string service_kind = 1;
    // service_instance - unique identifier for a service instance (within services of one kind)
    string service_instance = 2;
}

// GetSessionsResponse is a response body for GetSessions method
message GetSessionsResponse {
    message Session {
        // id - unique identifier of session (within a single service instance)
        string id = 1;
        // started_at - time when session has started (UTC)
        google.protobuf.Timestamp started_at = 2;
        // finished_at - time when session has stopped (UTC), may be empty if session is still alive
        google.protobuf.Timestamp finished_at = 3;
    }
    repeated Session sessions = 1;
}

// -------- SubscribeForSession ----------

// SubscribeForSessionRequest is a request body for SubscribeForSession request
message SubscribeForSessionRequest {
    // service_kind - identifier for a group of similar services
    string service_kind = 1;
    // service_instance - unique identifier for a service instance (within services of one kind)
    string service_instance = 2;
    // session_id - unique identifier of session (within a single service instance)
    string session_id = 3;
}


// MemoryUtilizationRate is a collection of rate values for memory consumption indicators.
// Formally, the rate (or velocity) is the first time derivative of any memory consumption indicator.
// For Bytes rate units are bytes per second, for Objects rate units are units per second
message MemoryUtilizationRate {
    // Values is a set of rate values
    message Values {
        double alloc_objects = 1;
        double alloc_bytes = 2;
        double free_objects = 3;
        double free_bytes = 4;
        double in_use_objects = 5;
        double in_use_bytes = 6;
    }
    // span is a time span that is used to compute rates
    google.protobuf.Duration span = 1;
    // values contains actual rates for a specified time span
    Values values = 2;
}

// LocationMetrics is a set of memory allocation statistics
// that happened on a particular line of source code
message LocationMetrics {
    // rates represents memory consumption rates estimated
    // for some averaging window defined by server
    repeated MemoryUtilizationRate rates = 1;
    // callstack describes location in code where the allocation happened
    Callstack callstack = 2;
}

// SessionMetrics contains list of heap allocation metrics per every location
message SessionMetrics {
   repeated LocationMetrics locations = 1;
}
