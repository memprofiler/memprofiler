// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend.proto

package schema

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SaveReportRequest - request for SaveReport method
type SaveReportRequest struct {
	// Types that are valid to be assigned to Payload:
	//	*SaveReportRequest_InstanceDescription
	//	*SaveReportRequest_Measurement
	Payload              isSaveReportRequest_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SaveReportRequest) Reset()         { *m = SaveReportRequest{} }
func (m *SaveReportRequest) String() string { return proto.CompactTextString(m) }
func (*SaveReportRequest) ProtoMessage()    {}
func (*SaveReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{0}
}

func (m *SaveReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveReportRequest.Unmarshal(m, b)
}
func (m *SaveReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveReportRequest.Marshal(b, m, deterministic)
}
func (m *SaveReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveReportRequest.Merge(m, src)
}
func (m *SaveReportRequest) XXX_Size() int {
	return xxx_messageInfo_SaveReportRequest.Size(m)
}
func (m *SaveReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveReportRequest proto.InternalMessageInfo

type isSaveReportRequest_Payload interface {
	isSaveReportRequest_Payload()
}

type SaveReportRequest_InstanceDescription struct {
	InstanceDescription *InstanceDescription `protobuf:"bytes,1,opt,name=instance_description,json=instanceDescription,proto3,oneof"`
}

type SaveReportRequest_Measurement struct {
	Measurement *Measurement `protobuf:"bytes,2,opt,name=measurement,proto3,oneof"`
}

func (*SaveReportRequest_InstanceDescription) isSaveReportRequest_Payload() {}

func (*SaveReportRequest_Measurement) isSaveReportRequest_Payload() {}

func (m *SaveReportRequest) GetPayload() isSaveReportRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SaveReportRequest) GetInstanceDescription() *InstanceDescription {
	if x, ok := m.GetPayload().(*SaveReportRequest_InstanceDescription); ok {
		return x.InstanceDescription
	}
	return nil
}

func (m *SaveReportRequest) GetMeasurement() *Measurement {
	if x, ok := m.GetPayload().(*SaveReportRequest_Measurement); ok {
		return x.Measurement
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SaveReportRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SaveReportRequest_InstanceDescription)(nil),
		(*SaveReportRequest_Measurement)(nil),
	}
}

// SaveReportResponse - response for SaveReport method
type SaveReportResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveReportResponse) Reset()         { *m = SaveReportResponse{} }
func (m *SaveReportResponse) String() string { return proto.CompactTextString(m) }
func (*SaveReportResponse) ProtoMessage()    {}
func (*SaveReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{1}
}

func (m *SaveReportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveReportResponse.Unmarshal(m, b)
}
func (m *SaveReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveReportResponse.Marshal(b, m, deterministic)
}
func (m *SaveReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveReportResponse.Merge(m, src)
}
func (m *SaveReportResponse) XXX_Size() int {
	return xxx_messageInfo_SaveReportResponse.Size(m)
}
func (m *SaveReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveReportResponse proto.InternalMessageInfo

// Measurement contains instantaneous memory usage stats
type Measurement struct {
	// observed_at - measurement timestamp
	ObservedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=observed_at,json=observedAt,proto3" json:"observed_at,omitempty"`
	// locations - list of known memory allocations occured in a process
	Locations            []*Location `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Measurement) Reset()         { *m = Measurement{} }
func (m *Measurement) String() string { return proto.CompactTextString(m) }
func (*Measurement) ProtoMessage()    {}
func (*Measurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{2}
}

func (m *Measurement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Measurement.Unmarshal(m, b)
}
func (m *Measurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Measurement.Marshal(b, m, deterministic)
}
func (m *Measurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Measurement.Merge(m, src)
}
func (m *Measurement) XXX_Size() int {
	return xxx_messageInfo_Measurement.Size(m)
}
func (m *Measurement) XXX_DiscardUnknown() {
	xxx_messageInfo_Measurement.DiscardUnknown(m)
}

var xxx_messageInfo_Measurement proto.InternalMessageInfo

func (m *Measurement) GetObservedAt() *timestamp.Timestamp {
	if m != nil {
		return m.ObservedAt
	}
	return nil
}

func (m *Measurement) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

// Location contains memory allocation stats with
// information about where memory was actually allocated
type Location struct {
	MemoryUsage          *MemoryUsage `protobuf:"bytes,1,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	Callstack            *Callstack   `protobuf:"bytes,2,opt,name=callstack,proto3" json:"callstack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{3}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetMemoryUsage() *MemoryUsage {
	if m != nil {
		return m.MemoryUsage
	}
	return nil
}

func (m *Location) GetCallstack() *Callstack {
	if m != nil {
		return m.Callstack
	}
	return nil
}

// MemoryUsage contains memory usage stats for a particular call stack;
// this stats comes directly from Go runtime
type MemoryUsage struct {
	AllocObjects         int64    `protobuf:"varint,1,opt,name=alloc_objects,json=allocObjects,proto3" json:"alloc_objects,omitempty"`
	AllocBytes           int64    `protobuf:"varint,2,opt,name=alloc_bytes,json=allocBytes,proto3" json:"alloc_bytes,omitempty"`
	FreeObjects          int64    `protobuf:"varint,3,opt,name=free_objects,json=freeObjects,proto3" json:"free_objects,omitempty"`
	FreeBytes            int64    `protobuf:"varint,4,opt,name=free_bytes,json=freeBytes,proto3" json:"free_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryUsage) Reset()         { *m = MemoryUsage{} }
func (m *MemoryUsage) String() string { return proto.CompactTextString(m) }
func (*MemoryUsage) ProtoMessage()    {}
func (*MemoryUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{4}
}

func (m *MemoryUsage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryUsage.Unmarshal(m, b)
}
func (m *MemoryUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryUsage.Marshal(b, m, deterministic)
}
func (m *MemoryUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryUsage.Merge(m, src)
}
func (m *MemoryUsage) XXX_Size() int {
	return xxx_messageInfo_MemoryUsage.Size(m)
}
func (m *MemoryUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryUsage.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryUsage proto.InternalMessageInfo

func (m *MemoryUsage) GetAllocObjects() int64 {
	if m != nil {
		return m.AllocObjects
	}
	return 0
}

func (m *MemoryUsage) GetAllocBytes() int64 {
	if m != nil {
		return m.AllocBytes
	}
	return 0
}

func (m *MemoryUsage) GetFreeObjects() int64 {
	if m != nil {
		return m.FreeObjects
	}
	return 0
}

func (m *MemoryUsage) GetFreeBytes() int64 {
	if m != nil {
		return m.FreeBytes
	}
	return 0
}

// Callstack describes call stack of memory allocation event
type Callstack struct {
	// id represents unique identifier for a particular stack
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// frames describes the place code where heap allocation occured
	Frames               []*StackFrame `protobuf:"bytes,2,rep,name=frames,proto3" json:"frames,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Callstack) Reset()         { *m = Callstack{} }
func (m *Callstack) String() string { return proto.CompactTextString(m) }
func (*Callstack) ProtoMessage()    {}
func (*Callstack) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{5}
}

func (m *Callstack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Callstack.Unmarshal(m, b)
}
func (m *Callstack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Callstack.Marshal(b, m, deterministic)
}
func (m *Callstack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Callstack.Merge(m, src)
}
func (m *Callstack) XXX_Size() int {
	return xxx_messageInfo_Callstack.Size(m)
}
func (m *Callstack) XXX_DiscardUnknown() {
	xxx_messageInfo_Callstack.DiscardUnknown(m)
}

var xxx_messageInfo_Callstack proto.InternalMessageInfo

func (m *Callstack) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Callstack) GetFrames() []*StackFrame {
	if m != nil {
		return m.Frames
	}
	return nil
}

// StackFrame provides information about a single stack frame
type StackFrame struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	File                 string   `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Line                 int32    `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StackFrame) Reset()         { *m = StackFrame{} }
func (m *StackFrame) String() string { return proto.CompactTextString(m) }
func (*StackFrame) ProtoMessage()    {}
func (*StackFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{6}
}

func (m *StackFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StackFrame.Unmarshal(m, b)
}
func (m *StackFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StackFrame.Marshal(b, m, deterministic)
}
func (m *StackFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackFrame.Merge(m, src)
}
func (m *StackFrame) XXX_Size() int {
	return xxx_messageInfo_StackFrame.Size(m)
}
func (m *StackFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_StackFrame.DiscardUnknown(m)
}

var xxx_messageInfo_StackFrame proto.InternalMessageInfo

func (m *StackFrame) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StackFrame) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *StackFrame) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func init() {
	proto.RegisterType((*SaveReportRequest)(nil), "schema.SaveReportRequest")
	proto.RegisterType((*SaveReportResponse)(nil), "schema.SaveReportResponse")
	proto.RegisterType((*Measurement)(nil), "schema.Measurement")
	proto.RegisterType((*Location)(nil), "schema.Location")
	proto.RegisterType((*MemoryUsage)(nil), "schema.MemoryUsage")
	proto.RegisterType((*Callstack)(nil), "schema.Callstack")
	proto.RegisterType((*StackFrame)(nil), "schema.StackFrame")
}

func init() { proto.RegisterFile("backend.proto", fileDescriptor_5ab9ba5b8d8b2ba5) }

var fileDescriptor_5ab9ba5b8d8b2ba5 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xfb, 0x67, 0x29, 0x64, 0xd2, 0x45, 0xac, 0x77, 0x0f, 0x25, 0x08, 0xed, 0x12, 0x2e,
	0x15, 0x87, 0x54, 0x2a, 0x12, 0x1c, 0x38, 0x51, 0x10, 0x5b, 0x24, 0x56, 0x20, 0x2f, 0x1c, 0x51,
	0xe5, 0x38, 0xd3, 0x12, 0x36, 0xb6, 0x83, 0xed, 0xae, 0x54, 0xde, 0x83, 0x87, 0xe0, 0x2d, 0x91,
	0x9d, 0xb8, 0xa9, 0x80, 0x9b, 0xf3, 0xcd, 0x2f, 0xdf, 0x7c, 0x33, 0xb2, 0xe1, 0x38, 0x67, 0xfc,
	0x06, 0x65, 0x91, 0xd5, 0x5a, 0x59, 0x45, 0x46, 0x86, 0x7f, 0x43, 0xc1, 0x92, 0x31, 0x57, 0x42,
	0x28, 0xd9, 0xa8, 0xc9, 0xf9, 0x46, 0xa9, 0x4d, 0x85, 0x33, 0xff, 0x95, 0x6f, 0xd7, 0x33, 0x5b,
	0x0a, 0x34, 0x96, 0x89, 0xba, 0x01, 0xd2, 0xdf, 0x7d, 0x38, 0xb9, 0x66, 0xb7, 0x48, 0xb1, 0x56,
	0xda, 0x52, 0xfc, 0xb1, 0x45, 0x63, 0xc9, 0x27, 0x38, 0x2b, 0xa5, 0xb1, 0x4c, 0x72, 0x5c, 0x15,
	0x68, 0xb8, 0x2e, 0x6b, 0x5b, 0x2a, 0x39, 0xe9, 0x5f, 0xf4, 0xa7, 0xf1, 0xfc, 0x51, 0xd6, 0xf4,
	0xca, 0xde, 0xb7, 0xcc, 0xdb, 0x0e, 0x59, 0xf6, 0xe8, 0x69, 0xf9, 0xaf, 0x4c, 0x5e, 0x42, 0x2c,
	0x90, 0x99, 0xad, 0x46, 0x81, 0xd2, 0x4e, 0x06, 0xde, 0xe8, 0x34, 0x18, 0x5d, 0x75, 0xa5, 0x65,
	0x8f, 0x1e, 0x92, 0x8b, 0x08, 0xee, 0xd6, 0x6c, 0x57, 0x29, 0x56, 0xa4, 0x67, 0x40, 0x0e, 0xa3,
	0x9a, 0x5a, 0x49, 0x83, 0xe9, 0x4f, 0x88, 0x0f, 0x7e, 0x27, 0xaf, 0x20, 0x56, 0xb9, 0x41, 0x7d,
	0x8b, 0xc5, 0x8a, 0xd9, 0x36, 0x71, 0x92, 0x35, 0x7b, 0xc8, 0xc2, 0x1e, 0xb2, 0xcf, 0x61, 0x0f,
	0x14, 0x02, 0xfe, 0xda, 0x92, 0x0c, 0xa2, 0x4a, 0x71, 0xe6, 0x12, 0x9b, 0xc9, 0xe0, 0x62, 0x38,
	0x8d, 0xe7, 0x0f, 0x42, 0xc6, 0x0f, 0x6d, 0x81, 0x76, 0x48, 0x6a, 0xe0, 0x5e, 0x90, 0xc9, 0x0b,
	0x18, 0x0b, 0x14, 0x4a, 0xef, 0x56, 0x5b, 0xc3, 0x36, 0xd8, 0x76, 0x3e, 0x18, 0xd1, 0xd5, 0xbe,
	0xb8, 0x92, 0x1b, 0x70, 0xff, 0x41, 0x66, 0x10, 0x71, 0x56, 0x55, 0xc6, 0x32, 0x7e, 0xd3, 0xee,
	0xe5, 0x24, 0xfc, 0xf4, 0x26, 0x14, 0x68, 0xc7, 0xa4, 0xbf, 0xfa, 0x6e, 0xe2, 0xce, 0xe0, 0x29,
	0x1c, 0xb3, 0xaa, 0x52, 0x7c, 0xa5, 0xf2, 0xef, 0xc8, 0xad, 0xf1, 0x9d, 0x87, 0x74, 0xec, 0xc5,
	0x8f, 0x8d, 0x46, 0xce, 0x21, 0x6e, 0xa0, 0x7c, 0x67, 0xd1, 0xf8, 0x3e, 0x43, 0x0a, 0x5e, 0x5a,
	0x38, 0x85, 0x3c, 0x81, 0xf1, 0x5a, 0x23, 0xee, 0x4d, 0x86, 0x9e, 0x88, 0x9d, 0x16, 0x3c, 0x1e,
	0x03, 0x78, 0xa4, 0xb1, 0x38, 0xf2, 0x40, 0xe4, 0x14, 0xef, 0x90, 0x5e, 0x42, 0xb4, 0xcf, 0x4b,
	0xee, 0xc3, 0xa0, 0x2c, 0x7c, 0x92, 0x88, 0x0e, 0xca, 0x82, 0x3c, 0x83, 0xd1, 0x5a, 0x33, 0x81,
	0x61, 0xad, 0x24, 0x8c, 0x78, 0xed, 0xf0, 0x77, 0xae, 0x44, 0x5b, 0x22, 0x5d, 0x02, 0x74, 0x2a,
	0x21, 0x70, 0x24, 0x99, 0xc0, 0xd6, 0xcb, 0x9f, 0x9d, 0xb6, 0x2e, 0x2b, 0xf4, 0x63, 0x44, 0xd4,
	0x9f, 0x9d, 0x56, 0x95, 0x12, 0x7d, 0xf0, 0x3b, 0xd4, 0x9f, 0xe7, 0x5f, 0x81, 0x5c, 0xa1, 0xa8,
	0xb5, 0x72, 0x84, 0x5e, 0x34, 0x0f, 0x86, 0x5c, 0x02, 0x74, 0xf7, 0x88, 0x3c, 0xdc, 0x27, 0xf9,
	0xfb, 0x19, 0x24, 0xc9, 0xff, 0x4a, 0xed, 0xb5, 0xeb, 0x4d, 0xfb, 0xf9, 0xc8, 0x5f, 0xa7, 0xe7,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x54, 0xe7, 0xa8, 0x11, 0x8b, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MemprofilerBackendClient is the client API for MemprofilerBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MemprofilerBackendClient interface {
	// SaveReport is a client-side stream used to save memory usage reports to Memprofiler server
	SaveReport(ctx context.Context, opts ...grpc.CallOption) (MemprofilerBackend_SaveReportClient, error)
}

type memprofilerBackendClient struct {
	cc *grpc.ClientConn
}

func NewMemprofilerBackendClient(cc *grpc.ClientConn) MemprofilerBackendClient {
	return &memprofilerBackendClient{cc}
}

func (c *memprofilerBackendClient) SaveReport(ctx context.Context, opts ...grpc.CallOption) (MemprofilerBackend_SaveReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemprofilerBackend_serviceDesc.Streams[0], "/schema.MemprofilerBackend/SaveReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &memprofilerBackendSaveReportClient{stream}
	return x, nil
}

type MemprofilerBackend_SaveReportClient interface {
	Send(*SaveReportRequest) error
	CloseAndRecv() (*SaveReportResponse, error)
	grpc.ClientStream
}

type memprofilerBackendSaveReportClient struct {
	grpc.ClientStream
}

func (x *memprofilerBackendSaveReportClient) Send(m *SaveReportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memprofilerBackendSaveReportClient) CloseAndRecv() (*SaveReportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MemprofilerBackendServer is the server API for MemprofilerBackend service.
type MemprofilerBackendServer interface {
	// SaveReport is a client-side stream used to save memory usage reports to Memprofiler server
	SaveReport(MemprofilerBackend_SaveReportServer) error
}

// UnimplementedMemprofilerBackendServer can be embedded to have forward compatible implementations.
type UnimplementedMemprofilerBackendServer struct {
}

func (*UnimplementedMemprofilerBackendServer) SaveReport(srv MemprofilerBackend_SaveReportServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveReport not implemented")
}

func RegisterMemprofilerBackendServer(s *grpc.Server, srv MemprofilerBackendServer) {
	s.RegisterService(&_MemprofilerBackend_serviceDesc, srv)
}

func _MemprofilerBackend_SaveReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemprofilerBackendServer).SaveReport(&memprofilerBackendSaveReportServer{stream})
}

type MemprofilerBackend_SaveReportServer interface {
	SendAndClose(*SaveReportResponse) error
	Recv() (*SaveReportRequest, error)
	grpc.ServerStream
}

type memprofilerBackendSaveReportServer struct {
	grpc.ServerStream
}

func (x *memprofilerBackendSaveReportServer) SendAndClose(m *SaveReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memprofilerBackendSaveReportServer) Recv() (*SaveReportRequest, error) {
	m := new(SaveReportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MemprofilerBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schema.MemprofilerBackend",
	HandlerType: (*MemprofilerBackendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveReport",
			Handler:       _MemprofilerBackend_SaveReport_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "backend.proto",
}
